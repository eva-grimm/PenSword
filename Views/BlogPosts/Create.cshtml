@model BlogPost
@inject IImageService _ImageService;
@inject IBlogService _BlogService;

@{
    ViewData["Title"] = "New Post";
}

<style>
    .ck-editor__editable_inline {
        min-height: 600px;
    }

    input.largerCheckbox {
        width: 30px;
        height: 30px;
    }

    label.form-check-label {
        font-size: 22px;
    }
</style>
<div class="post-single-wrapper axil-section-gap bg-color-white">
    <div class="container">
        <h1>Create</h1>
        <h4>BlogPost</h4>
    </div>
    <hr />
    <main class="container mt-5">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row">
                <div class="col-12 col-lg-4">
                    <div class="form-group">
                        <label asp-for="ImageFile" class="control-label">Blog Post Image</label>
                        <img class="img-fluid border rounded-3 mb-2" style="max-height: 350px;" src="@_ImageService.ConvertByteArrayToFile(Model?.ImageData!,Model?.ImageType!, DefaultImage.BlogPostImage)" id="blogImage">
                        <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                               onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                    </div>
                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Abstract" class="control-label"></label>
                        <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                        <span asp-validation-for="Abstract" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="CategoryId" class="control-label">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryList"></select>
                    </div>
                </div>
                <div class="col-12 col-lg-8">
                    <div class="form-group">
                        <label asp-for="Content" class="control-label"></label>
                        <textarea asp-for="Content" class="editor form-control"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                    </div>
                    <div class="form-group" id="tagContainer">
                        <label for="tagInput"></label>
                        <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
                        <div class="tagcloud axil-single-widget mt-2" style="display:none">
                            <!-- tags go here -->
                            @foreach (Tag tag in await _BlogService.GetTagsAsync())
                            {
                                <a>@tag.Name</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group d-flex justify-content-end">
                <label class="form-check-label me-4 mt-2" asp-for="IsPublished">Publish?</label>
                <input class="largerCheckbox me-8" type="checkbox" asp-for="IsPublished" />
                <span asp-validation-for="IsPublished" class="text-danger"></span>
            </div>
            <div class="form-group d-flex justify-content-end">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
        <div class="form-group mt-5 start-0">
            <a asp-action="Index">Back</a>
        </div>
    </main>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <!--CK Editor-->
    <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'), {
                licenseKey: '',
            })
            .then(editor => {
                window.editor = editor;
            });
    </script>

    <script>
        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };

        $(document).ready(function () {
            // show tagcloud when focused on tagInput
            $('#tagInput').focus(function () {
                $('.tagcloud').show(300);
            });
            // hide when not
            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            $('#tagInput').keyup(function () {
                // get just the text from the input after the last comma
                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                // hide all the tags which do not contain that text
                $(`.tagcloud > a:not( :contains(${searchString}))`).hide();

                // show those that do
                $(`.tagcloud > a:contains(${searchString})`).show();

                // disable tags already selected
                $('.disabledTag').removeClass('disabledTag');
                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;

                    let matchingTag = $(`.tagcloud > a:contains(${tag.trim()})`);
                    if (matchingTag.text().trim().toLowerCase() == tag.trim().toLowerCase()) {
                        matchingTag.addClass('disabledTag');
                    };
                });
            });

            $('.tagcloud > a').click(function () {
                // if disabled, then do nothung further
                if ($(this).hasClass('disabledTag')) {
                    $('#tagInput').focus();
                    return;
                }

                // name of clicked tag and text in tagInput
                let tagName = $(this).text();
                let tags = $('#tagInput').val().split(',');

                tags.pop();
                tags.push(tagName);

                // return result to tagInput
                let tagsAsString = tags.map(t => t.trim()).join(', ') + ', ';
                $('#tagInput').val(tagsAsString);

                $('#tagInput').focus();
                // trigger keyup function above, so all tags always shown after selection
                $('#tagInput').keyup();
            })
        })
    </script>
}